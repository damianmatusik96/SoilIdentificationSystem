import React from 'react'
import {Button, Col, Container, Row} from "react-bootstrap";
import {Scatter} from "react-chartjs-2";

const SCATTER_PROPERTIES = (color) => ({
    fill: false,
    backgroundColor: color,
    pointBorderColor: color,
    pointBackgroundColor: color,
    pointHoverBackgroundColor: color,
    pointHoverBorderColor: color,
    pointRadius: 4,
});

const LINE_CHART_PROPERTIES = {
    backgroundColor: 'rgba(75,192,192,0.4)',
    pointBorderColor: 'rgba(75,192,192,1)',
    pointBackgroundColor: 'rgba(75,192,192,1)',
    borderColor: 'rgba(75,192,192,1)',
    pointBorderWidth: 1,
    pointHoverRadius: 5,
    fill: false,
    pointHoverBackgroundColor: 'rgba(75,192,192,1)',
    pointHoverBorderColor: 'rgba(220,220,220,1)',
    pointHoverBorderWidth: 2,
    pointRadius: 1,
    pointHitRadius: 10,
    yAxes: 'reverse',
    showLine: true,
};

const LineChartComponent = ({data, options}) => (

    <div style={{padding: 50}}>
        <Scatter className="chart" data={data} options={options}/>
    </div>
);

const ScatterChartComponent = ({data, options}) => (
    <div style={{padding: 50}}>
        <Scatter data={data} options={options}/>
    </div>
);

class ChartsPanel extends React.Component {
    state = {
        line1: {
            options: {},
            chartData: {}

        },
        scatter1: {
            chartData: {}
        },
        line2: {
            options: {},
            chartData: {}
        },
        scatter2: {
            chartData: {}
        }
    };

    getProfile = () => {
        const url = "http://localhost:5000/predict";
        fetch(url)
            .then(response => response.json())
            .then((data) => this.setState({
                line1: {
                    options: {
                        width: "800",
                        height: "800",
                        scales: {
                            yAxes: [{
                                ticks: {
                                    reverse: true,
                                }
                            }]
                        }
                    },
                    chartData: {
                        datasets: [
                            {
                                label: 'Soil profile generated with average profile',
                                ...LINE_CHART_PROPERTIES,
                                data: data.profile1
                            }
                        ]
                    }
                },
                scatter1: {
                    chartData: {
                        type: 'scatter',
                        datasets: [
                            {
                                label: 'Layer 1',
                                ...SCATTER_PROPERTIES('red'),
                                data: data.groups1.group1,
                            },
                            {
                                label: 'Layer 2',
                                ...SCATTER_PROPERTIES('green'),
                                data: data.groups1.group2,
                            },
                            {
                                label: 'Layer 3',
                                ...SCATTER_PROPERTIES('blue'),
                                data: data.groups1.group3,
                            }
                        ]
                    },
                },
                line2: {
                    options: {
                        width: "800",
                        height: "800",
                        scales: {
                            yAxes: [{
                                ticks: {
                                    reverse: true,
                                }
                            }]
                        }
                    },
                    chartData: {
                        datasets: [
                            {
                                label: 'Soil profile generated by fuzzy K-means',
                                ...LINE_CHART_PROPERTIES,
                                data: data.profile2
                            }
                        ]
                    }
                },
                scatter2: {
                    chartData: {
                        type: 'scatter',
                        datasets: [
                            {
                                label: 'layer 1',
                                ...SCATTER_PROPERTIES('orange'),
                                data: data.groups2.group1,
                            },
                            {
                                label: 'Layer 2',
                                ...SCATTER_PROPERTIES('blue'),
                                data: data.groups2.group2,
                            },
                            {
                                label: 'Layer 3',
                                ...SCATTER_PROPERTIES('green'),
                                data: data.groups2.group3,
                            },
                            {
                                label: 'Layer 4',
                                ...SCATTER_PROPERTIES('red'),
                                data: data.groups2.group4,
                            }
                        ]
                    }
                }
            }));

        console.log(this.state)
    };


    render() {
        return (
            <Container>
                <Row>
                    <Col sm={12} md={6}>
                        <LineChartComponent data={this.state.line1.chartData}
                                            options={this.state.line1.options}/>
                    </Col>
                    <Col sm={12} md={6}>
                        <ScatterChartComponent data={this.state.scatter1.chartData}/>
                    </Col>
                </Row>
                <Row>
                    <Col sm={12} md={6}>
                        <LineChartComponent data={this.state.line2.chartData}
                                            options={this.state.line2.options}/>
                    </Col>
                    <Col sm={12} md={6}>
                        <ScatterChartComponent data={this.state.scatter2.chartData}/>
                    </Col>
                </Row>
                <Row>
                    <Col sm={12} md={6}>
                        <div className='Button'>
                            <Button variant="dark"
                                    size="lg"
                                    block
                                    onClick={() => this.getProfile()}>
                                Generate profile
                            </Button>
                        </div>
                    </Col>
                    <Col sm={12} md={6}>
                        <div className='Button'>
                            <Button variant="dark"
                                    size="lg"
                                    block>
                                Download Data
                            </Button>
                        </div>
                    </Col>
                </Row>
            </Container>
        )
    };
}

export default ChartsPanel;